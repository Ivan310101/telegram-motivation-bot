import asyncio
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import aiosqlite

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
DB_PATH = 'motivation.db'

# –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã (–Ω–µ –±–æ–ª–µ–µ 1 –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –¥–µ–Ω—å)
@dp.message_handler(lambda msg: msg.text.startswith('+'))
async def handle_task(msg: types.Message):
    user_id = msg.from_user.id
    username = msg.from_user.username or msg.from_user.full_name
    task = msg.text[1:].strip().lower()
    today = datetime.now().date().isoformat()

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            points INTEGER DEFAULT 0
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS logs (
            user_id INTEGER,
            task TEXT,
            date TEXT
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS prizes (
            name TEXT PRIMARY KEY,
            cost INTEGER
        )""")
        await db.execute("""INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)""", (user_id, username))
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–∞—á–∏—Å–ª—è–ª–æ—Å—å –ª–∏ —Å–µ–≥–æ–¥–Ω—è
        async with db.execute("""SELECT 1 FROM logs WHERE user_id = ? AND task = ? AND date = ?""", (user_id, task, today)) as c:
            if await c.fetchone():
                return await msg.reply(f"–ë–∞–ª–ª—ã –∑–∞ '{task}' —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Å–µ–≥–æ–¥–Ω—è.")

        await db.execute("""INSERT INTO logs (user_id, task, date) VALUES (?, ?, ?)""", (user_id, task, today))
        await db.execute("""UPDATE users SET points = points + 1 WHERE user_id = ?""", (user_id,))
        await db.commit()
    await msg.reply(f"‚úÖ –ó–∞ –∑–∞–¥–∞—á—É '{task}' –Ω–∞—á–∏—Å–ª–µ–Ω 1 –±–∞–ª–ª!")

@dp.message_handler(commands=['score'])
async def score(msg: types.Message):
    user_id = msg.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT points FROM users WHERE user_id = ?", (user_id,)) as c:
            row = await c.fetchone()
    if row:
        await msg.reply(f"–£ —Ç–µ–±—è {row[0]} –±–∞–ª–ª–æ–≤.")
    else:
        await msg.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –±–∞–ª–ª–æ–≤.")

@dp.message_handler(commands=['shop'])
async def shop(msg: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT name, cost FROM prizes") as c:
            rows = await c.fetchall()
    if rows:
        text = "\n".join([f"{name} ‚Äî {cost} –ë" for name, cost in rows])
        await msg.reply(f"üéÅ –ü—Ä–∏–∑—ã:\n{text}")
    else:
        await msg.reply("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç.")

@dp.message_handler(commands=['buy'])
async def buy(msg: types.Message):
    user_id = msg.from_user.id
    item = msg.get_args().strip().lower()
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT cost FROM prizes WHERE name = ?", (item,)) as c:
            prize = await c.fetchone()
        if not prize:
            return await msg.reply("–¢–∞–∫–æ–≥–æ –ø—Ä–∏–∑–∞ –Ω–µ—Ç.")
        cost = prize[0]
        async with db.execute("SELECT points FROM users WHERE user_id = ?", (user_id,)) as c:
            user = await c.fetchone()
        if not user or user[0] < cost:
            return await msg.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤.")
        await db.execute("UPDATE users SET points = points - ? WHERE user_id = ?", (cost, user_id))
        await db.commit()
    await msg.reply(f"üéâ –¢—ã –æ–±–º–µ–Ω—è–ª {cost} –±–∞–ª–ª–æ–≤ –Ω–∞ ¬´{item}¬ª!")

@dp.message_handler(commands=['top'])
async def top(msg: types.Message):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT username, points FROM users ORDER BY points DESC LIMIT 10") as c:
            rows = await c.fetchall()
    if rows:
        leaderboard = "\n".join([f"{i+1}. {name}: {pts} –ë" for i, (name, pts) in enumerate(rows)])
        await msg.reply("üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" + leaderboard)
    else:
        await msg.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

async def main():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS prizes (
            name TEXT PRIMARY KEY,
            cost INTEGER
        )""")
        prizes = [
            ('–ª–∏–º–æ–Ω–∞–¥ –∏–∑ –º–µ–Ω—é', 20), ('–ª–∞–ø–æ—á–∫–∞ –∫–æ–ª–∞', 30), ('—Å–æ–∫ –∑—É–µ–≥', 35), ('–ø–∏–≤–æ –ë/–ê', 40),
            ('–Ω–µ–ª–∏–∫–≤–∏–¥–Ω–æ–µ –≤–∏–Ω–æ —Ä–æ—Å—Å–∏—è', 120), ('–Ω–µ–ª–∏–∫–≤–∏–¥–Ω–æ–µ –≤–∏–Ω–æ –∏–º–ø–æ—Ä—Ç', 260),
            ('–±—É—Ä–≥–µ—Ä', 75), ('–±–æ—Ä—â', 65), ('—à–∞–Ω—å–≥–∞', 65), ('—è–∏—á–Ω–∏—Ü–∞', 55),
            ('–≥—Ä–µ—á–∞ —Å —É—Ç–∫–æ–π', 65), ('—Å–µ—Ç —É—Ä–∞–ª', 250),
            ('–∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Å–º–µ–Ω–µ', 40), ('–≤—ã–±–æ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ', 60),
            ('–∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', 250), ('–Ω–æ–∂ —Å–æ–º–µ–ª—å–µ', 240), ('—Ñ—É—Ç–±–æ–ª–∫–∞', 400)
        ]
        for name, cost in prizes:
            await db.execute("INSERT OR IGNORE INTO prizes (name, cost) VALUES (?, ?)", (name, cost))
        await db.commit()
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
